---
import { twMerge } from "tailwind-merge";
import Icon from "./Icon.astro";
import { Button } from "./button";

export interface Image {
  src: string;
  alt?: string;
}

export interface Item {
  title?: string;
  description?: string;
  icon?: string;
  classes?: Record<string, string>;
  image?: Image;
}

export interface ItemGrid {
  items?: Array<Item>;
  columns?: number;
  defaultIcon?: string;
  classes?: Record<string, string>;
}

const { items = [], columns, defaultIcon = "", classes = {} } = Astro.props;

const {
  container: containerClass = "",
  panel: panelClass = "",
  title: titleClass = "",
  description: descriptionClass = "",
  icon: defaultIconClass = "text-primary",
  action: actionClass = "",
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `grid mx-auto gap-8 md:gap-y-12 ${
          columns === 4
            ? "lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2"
            : columns === 3
              ? "lg:grid-cols-3 sm:grid-cols-2"
              : columns === 2
                ? "sm:grid-cols-2 "
                : ""
        }`,
        containerClass
      )}
    >
      {items.map(
        ({ title, description, icon, classes: itemClasses = {} }: Item) => (
          <div class="intersect-once motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
            <div
              class={twMerge(
                "flex flex-row max-w-md",
                panelClass,
                itemClasses?.panel
              )}
            >
              <div class="flex justify-center">
                {(icon || defaultIcon) && (
                  <Icon
                    name={icon || defaultIcon}
                    class={twMerge(
                      "w-7 h-7 mr-2 rtl:mr-0 rtl:ml-2",
                      defaultIconClass,
                      itemClasses?.icon
                    )}
                  />
                )}
              </div>
              <div class="mt-0.5">
                {title && (
                  <h3
                    class={twMerge(
                      "text-xl font-bold",
                      titleClass,
                      itemClasses?.title
                    )}
                  >
                    {title}
                  </h3>
                )}
                {description && (
                  <p
                    class={twMerge(
                      `${title ? "mt-3" : ""} text-muted`,
                      descriptionClass,
                      itemClasses?.description
                    )}
                    set:html={description}
                  />
                )}
              </div>
            </div>
          </div>
        )
      )}
    </div>
  )
}
